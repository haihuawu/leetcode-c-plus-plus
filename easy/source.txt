C++
//  LC1
vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> result;
	int size = nums.size();
	int i,j;
	for(i=0;i<size-1;i++)
	{
		bool bBreak = false;
		for(j=i+1;j<size;j++)
		{
			if(nums[i] + nums[j] == target)
			{
				bBreak = true;
				break;
			}
		}
		if(bBreak == true)
		{
			break;
		}
	}
	result.push_back(i);
	result.push_back(j);
	return result;
        
    }


//  LC7
int reverse(int x) {
        int result = 0;
	bool bPositive = x>=0? true:false;
	if(bPositive == false)
	{
		x=-x;
	}

	while(x>0)
	{
		int temp = x-x/10*10;
		if(result > INT_MAX)
		{
			return 0;
		}
		result = result*10+temp;
		x=x/10;
	}

	if(result<0)
	{
		result = 0;
	}
	else
	{
		if(bPositive == false)
		{
			result = -result;
		}
	}
	return result;
        
    }


//  LC9
bool isPalindrome(int x) {
        if(x<0) return false;
	int div = 1;
	while(x/div >=10)
	{
		div *=10;
	}

	//cout << div << endl;

	while(x>0)
	{
		if(x/div != x%10)
		{
			return false;
		}
		x = (x%div)/10;
		div /=100;
	}
	return true;
        
    }


//  LC13
static int getValue(char c)
{
	int value = 0;
	switch(c)
	{
	case 'I':
		value = 1;
		break;
	case 'V':
		value = 5;
		break;
	case 'X':
		value = 10;
		break;
	case 'L':
		value = 50;
		break;
	case 'C':
		value = 100;
		break;
	case 'D':
		value = 500;
		break;
	case 'M':
		value = 1000;
		break;
	default:
		break;
	}
	return value;
}
    int romanToInt(string s) {
        int output = getValue(s[0]);
	for(int i=1;i<(int)s.size();i++)
	{
		//<=
		if(getValue(s[i])<=getValue(s[i-1]))
		{
			output += getValue(s[i]);
		}
		//>
		else
		{
			output = output + getValue(s[i]) - 2*getValue(s[i-1]);
		}
	}
	return output;
        
    }


//  LC14
string longestCommonPrefix(vector<string>& strs) {
        if(strs.size() == 0)
    {
    	return "";
    }
	string same=strs[0];
	for(int i=1;i<(int)strs.size();i++)
	{
		int j;
		for(j=0;j<(int)same.length();j++)
		{
			if(same[j] != strs[i][j])
			{
				break;
			}
		}
		same = same.substr(0,j);
	}
    return same;
        
    }



//  LC20
bool isValid(string s) {
        stack<char> parenthese;
	int nSize = s.length();
	if(nSize == 0 || nSize == 1)
	{
		return false;
	}

	int nIndex = 0;
	while(nIndex<nSize)
	{
		if(parenthese.size() == 0)
		{
			parenthese.push(s[nIndex]);
		}
		else
		{
			char tmp = parenthese.top();

			if((tmp == '[' && s[nIndex] == ']') || (tmp == '(' && s[nIndex] == ')') || (tmp == '{'&& s[nIndex] == '}'))
			{
				parenthese.pop();
			}
			else
			{
				parenthese.push(s[nIndex]);
			}
		}
		nIndex++;
	}

	return parenthese.size()==0? true:false;
        
    }

//  LC21
ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
	{
		return l2;
	}
	else if(l2 == NULL)
	{
		return l1;
	}
	
	ListNode* head = new ListNode(0);
	if(l1->val <= l2->val)
	{
		head = l1;
		l1 = l1->next;
	}
	else
	{
		head = l2;
		l2 = l2->next;
	}
	
	ListNode* p = head;
	while(l1!=NULL && l2!=NULL)
	{
		if(l1->val <= l2->val)
		{
			p->next = l1;
			p = p->next;
			l1 = l1->next;
		}
		else
		{
			p->next = l2;
			p = p->next;
			l2 = l2->next;
		}
	}
	
	if(l1 == NULL)
	{
		p->next = l2;
	}
	if(l2 == NULL)
	{
		p->next = l1;
	}
	return head;
        
    }


//  LC26
int removeDuplicates(vector<int>& nums) {
        int size = nums.size();
        if(size < 2)
        {
            return size;
        }

        int count = 1;
        for(int i = 1; i<size;i++)
        {
            if(nums[i]!=nums[i-1])
            {
                nums[count++] = nums[i];
            }

        }
        return count;
        
    }


//  LC27
 int removeElement(vector<int>& nums, int val) {
        if(nums.size()==0)
   {
	   return 0;
   }

   int index = 0;
   for(int i = 0;i<(int)nums.size();i++)
   {
	   if(nums[i] != val)
	   {
		   nums[index++]=nums[i];
	   }
   }
   return index;
        
    }


//
//  main.cpp
//  LC28
//
//  Created by H.HUA WU on 11/20/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

// Implement strStr()

int strStr(string haystack, string needle) {
    int result = -1;
    // needle size less than or equal to 0, return 0. same for haystack
    if (needle.size()<=0 && haystack.size()<=0){
        return 0;
    }
    // needle size larger than haystack, return -1
    if (needle.size()>haystack.size() ){
        return -1;
    }
    // needle size is less than or equal to 0, return 0
    if (needle.size()<=0){
        return 0;
    }
    
    // find same part between needle and haystack
    for (int i=0;i<haystack.size()-needle.size()+1;i++){
        int j = 0;
        int tempi = i;
        for (j=0;j<needle.size();j++){
            if (needle[j] != haystack[tempi]){
                break;
            }
            else{
                tempi++;
            }
        }
        if (j==needle.size()){
            result = i;
            break;
        }
        
    }
    return result;
}


//
//  main.cpp
//  LC35
//
//  Created by H.HUA WU on 11/23/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

// Search Insert Position

int searchInsert(vector<int>& nums, int target) {
    int result = 0;
    while (result < nums.size()){
	// target equal or less than current nums element, return index
        if(target == nums[result]){
            return result;
        }
        else if(target < nums[result]){
            return result;
        }
        else{
            result++;
        }        
    }
    return result;
}


//
//  main.cpp
//  LC38
//
//  Created by H.HUA WU on 11/28/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//


string countAndSay(int n) {
    if(n==1)
    {
        return "1";
    }
    string s = "";
    string str = countAndSay(n-1)+"*";
    int count = 1;
    for(int i=0;i<str.length()-1;i++)
    {
        if(str[i] == str[i+1])
        {
            count++;
        }
        else
        {
            s = s+ to_string(count)+str[i];
            count = 1;
            
        }
    }
    
    return s;
}


//
//  main.cpp
//  LC53
//
//  Created by H.HUA WU on 11/28/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//


int maxSubArray(vector<int>& nums) {
    int size = (int) nums.size();
    int max = nums[0];
    int dp[size];
    dp[0] = nums[0];
    for(int i=1;i<size;i++)
    {
        dp[i] = nums[i] + (dp[i-1]>0? dp[i-1]:0);
        max = max>dp[i]? max:dp[i];
    }
    return max;
}


//
//  main.cpp
//  LC58
//
//  Created by H.HUA WU on 11/29/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

int lengthOfLastWord(string s) {
    int result = 0;
    int tail = int (s.length()-1);
    while(tail >= 0 && s[tail] == ' ')
    {
        tail--;
    }
    while(tail>=0 && s[tail] != ' ')
    {
        result++;
        tail--;
    }
    return result;
}


//
//  main.cpp
//  LC66
//
//  Created by H.HUA WU on 11/29/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//


vector<int> plusOne(vector<int>& digits) {
    int len = int(digits.size());
    for(int i=len-1;i>=0;i--)
    {
        if(digits[i] == 9)
        {
            digits[i] = 0;
        }
        else
        {
            digits[i] += 1;
            return digits;
        }
    }
    digits[0] = 1;
    digits.push_back(0);
    return digits;
}


//
//  main.cpp
//  LC67
//
//  Created by H.HUA WU on 11/29/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

using namespace std;

string addBinary(string a, string b) {
    string s = "";
    int asize = int (a.size()-1);
    int bsize = int (b.size()-1);
    int gap = 0;
    while(asize >= 0 || bsize >= 0)
    {
        string aa = asize >=0 ? a.substr(asize,1) : "0";
        string bb = bsize >=0 ? b.substr(bsize,1) : "0";
        int ai = atoi(aa.c_str());
        int bi = atoi(bb.c_str());
        if(ai+bi+gap >= 2)
        {
            string temp = to_string((ai+bi+gap)%2);
            s = temp+s;
            gap = 1;
        }
        else
        {
            s = to_string(ai+bi+gap) + s;
            gap = 0;
        }
        asize--;
        bsize--;
        
    }
    if(gap == 1)
    {
        s = "1" + s;
    }
    return s;
}


//
//  main.cpp
//  LC69
//
//  Created by H.HUA WU on 11/30/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

int mySqrt(int x) {
    int left = 1;
    int right = x;
    while(left<=right)
    {
        int mid = left + (right-left)/2;
        if(mid == x/mid)
        {
            return mid;
        }
        else if(mid>x/mid)
        {
            right = mid-1;
        }
        else
        {
            left = mid+1;
        }
    }
    return right;
}

//
//  main.cpp
//  LC70
//
//  Created by H.HUA WU on 11/30/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

int climbStairs(int n) {
    if(n<=2)
    {
        return n;
    }
    int *T = new int[n+1];
    T[0] = 0;
    T[1] = 1;
    T[2] = 2;
    for(int i=3;i<=n;i++)
    {
        T[i] = T[i-1]+T[i-2];
    }
    int result = T[n];
    delete []T;
    return result;
}

//
//  main.cpp
//  LC83
//
//  Created by H.HUA WU on 12/1/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

ListNode* deleteDuplicates(ListNode* head) {
    if(head == NULL)
    {
        return head;
    }
    ListNode* p = head;
    ListNode* q = p->next;
    while(q)
    {
        if(q->val == p->val)
        {
            q = q->next;
        }
        else
        {
            p->next = q;
            p = q;
            q = q->next;
        }
    }
    p->next = q;
    return head;
}

//
//  main.cpp
//  LC88
//
//  Created by H.HUA WU on 12/1/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
    int index = m+n-1;
    int i = m-1;
    int j = n-1;
    while(i>=0&&j>=0)
    {
        nums1[index--] = nums1[i]>nums2[j]? nums1[i--]:nums2[j--];
    }
    if(j>=0)
    {
        for(int x=0;x<=j;x++)
        {
            nums1[x] = nums2[x];
        }
    }
}


//
//  main.cpp
//  LC100
//
//  Created by H.HUA WU on 12/3/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

bool isSameTree(TreeNode* p, TreeNode* q) {
    if(p==NULL || q == NULL)
    {
        return p == q;
    }
    
    if(p->val != q->val)
    {
        return false;
    }
    else
    {
        return isSameTree(p->left, q->left)&&isSameTree(p->right, q->right);
    }
}

//
//  main.cpp
//  LC101
//
//  Created by H.HUA WU on 12/3/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

bool comparenode(TreeNode* p, TreeNode* q)
{
    if(p == NULL && q == NULL)
    {
        return true;
    }
    if(p == NULL || q == NULL)
    {
        return false;
    }
    if(p->val != q->val)
    {
        return false;
    }
    
    return comparenode(p->left, q->right) && comparenode(p->right, q->left);
}

bool isSymmetric(TreeNode* root) {
    if(root == NULL)
    {
        return true;
    }
    return comparenode(root->left, root->right);
}


//
//  main.cpp
//  LC104
//
//  Created by H.HUA WU on 12/3/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

int maxDepth(TreeNode* root) {
    return root == NULL? 0 : max(maxDepth(root->left),maxDepth(root->right))+1;
}


//
//  main.cpp
//  LC107
//
//  Created by H.HUA WU on 12/4/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

vector<vector<int>> result;

void DFS(TreeNode* root, int level)
{
    if(root != NULL)
    {
        if(level == result.size())
        {
            result.push_back(vector<int>());
        }
        result[level].push_back(root->val);
        if(root->left)
        {
            DFS(root->left, level+1);
        }
        if(root->right)
        {
            DFS(root->right, level+1);
        }
    }
}

vector<vector<int>> levelOrderBottom(TreeNode* root) {
    DFS(root, 0);
    reverse(result.begin(), result.end());
    return result;
}

//
//  main.cpp
//  LC108
//
//  Created by H.HUA WU on 12/4/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

TreeNode* sortedArrayToBST(vector<int>& nums) {
    if(nums.size()==0)
    {
       return NULL;
    }
    if(nums.size()==1)
    {
        TreeNode* p = new TreeNode(nums[0]);
        return p;
    }

    int mid = nums[nums.size()/2];
    TreeNode* root = new TreeNode(mid);
    vector<int> leftnums(nums.begin(),nums.begin()+nums.size()/2);
    vector<int> rightnums(nums.begin()+nums.size()/2+1,nums.end());
    root->left = sortedArrayToBST(leftnums);
    root->right = sortedArrayToBST(rightnums);
    return root;
}


//
//  main.cpp
//  LC110
//
//  Created by H.HUA WU on 12/4/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

int depth(TreeNode* root)
{
    if(root==NULL)
    {
        return 0;
    }
    return max(depth(root->left),depth(root->right))+1;
}

bool isBalanced(TreeNode* root) {
    if(root == NULL)
    {
        return true;
    }
    return abs(depth(root->left)-depth(root->right))<=1 && isBalanced(root->left) && isBalanced(root->right);
}


//
//  main.cpp
//  LC111
//
//  Created by H.HUA WU on 12/5/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//


int minDepth(TreeNode* root) {
    if(root == NULL)
    {
        return 0;
    }
    if(root->left == NULL)
    {
        return minDepth(root->right) + 1;
    }
    if(root->right == NULL)
    {
        return minDepth(root->left) + 1;
    }
    return min(minDepth(root->left),minDepth(root->right)) + 1;
}



//
//  main.cpp
//  LC112
//
//  Created by H.HUA WU on 12/5/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

bool hasPathSum(TreeNode* root, int sum) {
    if(root == NULL)
    {
       return false;
    }
    if(root->val == sum && root->left == NULL && root->right == NULL)
    {
        return true;
    }
    return hasPathSum(root->left, sum-root->val) || hasPathSum(root->right, sum-root->val);
}


//
//  main.cpp
//  LC118
//
//  Created by H.HUA WU on 12/5/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

vector<vector<int>> generate(int numRows) {
    vector<vector<int>> res;
    for(int i=0;i<numRows;i++)
    {
        res.resize(i+1);
        res[i][0] = res[i][i] = 1;
        for(int j = 1;j<i;j++)
        {
            res[i][j] = res[i-1][j-1]+res[i-1][j];
        }
    }
    return res;
}


//
//  main.cpp
//  LC119
//
//  Created by H.HUA WU on 12/5/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

vector<int> getRow(int rowIndex) {
    vector<int> res(rowIndex+1,0);
    res[0] = 1;
    for(int i=1;i<rowIndex+1;i++)
    {
        for(int j=i;j>=1;j--)
        {
            res[j] += res[j-1];
        }
    }
    return res;
}


//
//  main.cpp
//  LC121
//
//  Created by H.HUA WU on 12/6/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

int maxProfit(vector<int>& prices) {
    int size = int(prices.size());
    int maxprofit = 0;
    int minprice = INT_MAX;
    for(int i=0;i<size;i++)
    {
        minprice = minprice>prices[i]? prices[i]:minprice;
        maxprofit = maxprofit < prices[i]-minprice? prices[i]-minprice:maxprofit;
    }
    
    return maxprofit;
}


//
//  main.cpp
//  LC122
//
//  Created by H.HUA WU on 12/6/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

int maxProfit(vector<int>& prices) {
    int profit = 0;
    for(int i=1;i<prices.size();i++)
    {
        profit += max(prices[i]-prices[i-1], 0);
    }
    return profit;
}


//
//  main.cpp
//  LC136
//
//  Created by H.HUA WU on 12/6/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

int singleNumber(vector<int>& nums) {
    int result = 0;
    for(int i=0;i<nums.size();i++)
    {
        result ^=nums[i];
    }
    return result;
}


//
//  main.cpp
//  LC141
//
//  Created by H.HUA WU on 12/7/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

bool hasCycle(ListNode *head) {
    if(head == NULL || head -> next == NULL)
    {
        return false;
    }
    ListNode* slow = head;
    ListNode* fast = head;
    while(slow->next!=NULL && fast->next!= NULL && fast->next->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
        if(slow == fast)
        {
            return true;
        }
    }
    return false;
}


//
//  main.cpp
//  LC160
//
//  Created by H.HUA WU on 12/7/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    if(headA == NULL || headB == NULL)
    {
        return NULL;
    }
    
    ListNode *p1 = headA;
    ListNode *p2 = headB;
    
    while(p1 != NULL && p2 != NULL && p1!=p2)
    {
        p1 = p1->next;
        p2 = p2->next;
        if(p1 == p2)
        {
            return p1;
        }
        
        if(p1 == NULL)
        {
            p1 = headB;
        }
        if(p2 == NULL)
        {
            p2 = headA;
        }
    }
    return p1;
}


//
//  main.cpp
//  LC167
//
//  Created by H.HUA WU on 12/8/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

vector<int> twoSum(vector<int>& numbers, int target) {
    
    int l = 0;
    int r = int(numbers.size())-1;
    vector<int> res;
    while(l<r)
    {
        if(numbers[l] + numbers[r] == target)
        {
            res.push_back(l+1);
            res.push_back(r+1);
            return res;
        }
        else if(numbers[l] + numbers[r]>target)
        {
            r--;
        }
        else
        {
            l++;
        }
    }
    return res;
}


//
//  main.cpp
//  LC168
//
//  Created by H.HUA WU on 12/9/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

string convertToTitle(int n) {
    return n == 0? "":convertToTitle((n-1)/26) + char((n-1)%26 + 'A');
}


//
//  main.cpp
//  LC169
//
//  Created by H.HUA WU on 12/31/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//


int majorityElement(vector<int>& nums) {
    unordered_map<int,int> counts;
    int size = int(nums.size());
    for(int i=0;i<size;i++)
    {
        if(++counts[nums[i]]>size/2)
        {
            return nums[i];
        }
    }
    return -1;
}


//
//  main.cpp
//  LC171
//
//  Created by H.HUA WU on 12/31/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

int titleToNumber(string s) {
    int sizew = int(s.length());
    if(sizew == 0)
    {
        return 0;
    }
    int result = 0;
    for(int i=0;i<sizew;i++)
    {
        result = result*26 + (s.at(i) - 'A' + 1);
    }
    return result;
}


//
//  main.cpp
//  LC172
//
//  Created by H.HUA WU on 1/1/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int trailingZeroes(int n) {
    int result = 0;
    while(n>0)
    {
        result += n/5;
        n = n/5;
    }
    return result;
}


//
//  main.cpp
//  LC189
//
//  Created by H.HUA WU on 1/1/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

void rotate(vector<int>& nums, int k) {

    int n = int(nums.size());
    if(n <= 1 || k<0)
        return;
    
    vector<int> numscopy(n);
    for(int i =0 ; i<n ; i++)
    {
        numscopy[i] = nums[i];
    }
    
    for(int i=0; i<n; i++)
    {
        nums[(i+k)%n] = numscopy[i];
    }
}


//
//  main.cpp
//  LC198
//
//  Created by H.HUA WU on 1/4/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int rob(vector<int>& nums) {
    int size = int(nums.size());
    if(size == 0)
    {
        return 0;
    
    }
    if(size == 1)
    {
        return nums[0];
    }
    if(size == 2)
    {
        return max(nums[0],nums[1]);
    }
    vector<int> f(size,0);
    f[0] = nums[0];
    f[1] = max(nums[0],nums[1]);
    for(int i =2;i<size;i++)
    {
        f[i] = max(f[i-1],f[i-2]+nums[i]);
    }
    return f[size-1];
}


//
//  main.cpp
//  LC203
//
//  Created by H.HUA WU on 1/4/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

ListNode* removeElements(ListNode* head, int val) {
    ListNode* temp = new ListNode(-1);
    temp->next = head;
    ListNode* res = temp;
    while(temp != NULL && temp->next != NULL)
    {
        if(temp->next->val == val)
        {
            ListNode* p = temp->next;
            temp->next = temp->next->next;
            delete p;
        }
        else
        {
            temp = temp->next;
        }
    }
    
    return res->next;
}


//
//  main.cpp
//  LC205
//
//  Created by H.HUA WU on 1/5/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

bool isIsomorphic(string s, string t) {
    vector<char> smapt(128,0);
    vector<char> tmaps(128,0);
    
    int nlen = int(s.length());
    for(int i=0;i<nlen;i++)
    {
        if(smapt[s[i]] == 0 && tmaps[t[i]] == 0)
        {
            smapt[s[i]] = t[i];
            tmaps[t[i]] = s[i];
        }
        else if(smapt[s[i]] != t[i] || tmaps[t[i]] != s[i])
        {
            return false;
        }
    }
    return true;
}


//
//  main.cpp
//  LC242
//
//  Created by H.HUA WU on 1/11/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

bool isAnagram(string s, string t) {
    sort(s.begin(), s.end());
    sort(t.begin(), t.end());
    return s==t;
}


//
//  main.cpp
//  LC257
//
//  Created by H.HUA WU on 1/12/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

void createpath(vector<string>& res, TreeNode* root, string strp)
{
    if(root->left == NULL && root->right == NULL)
    {
        res.push_back(strp);
        return;
    }
    
    if(root->left)
    {
        createpath(res, root->left, strp+"->"+to_string(root->left->val));
    }
    if(root->right)
    {
        createpath(res, root->right, strp+"->"+to_string(root->right->val));
    }
}


vector<string> binaryTreePaths(TreeNode* root) {
    vector<string> res;
    if(root==NULL)
    {
        return res;
    }
    createpath(res,root,to_string(root->val));
    return res;
}


//
//  main.cpp
//  LC258
//
//  Created by H.HUA WU on 1/12/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int addDigits(int num) {
    while(num>=10)
    {
        num = num/10 + num%10;
    }
    return num;
}


//
//  main.cpp
//  LC263
//
//  Created by H.HUA WU on 1/13/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

bool isUgly(int num) {
    if(num == 0)
    {
        return false;
    }
    while(num%2 == 0)
    {
        num = num/2;
    }
    while(num%3 == 0)
    {
        num = num/3;
    }
    while(num%5 == 0)
    {
        num = num/5;
    }
    
    if(num == 1)
    {
        return true;
    }
    else
    {
        return false;
    }
}


//
//  main.cpp
//  LC268
//
//  Created by H.HUA WU on 1/13/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int missingNumber(vector<int>& nums) {
    long n = nums.size();
    long sum = 0;
    for(long i = 0;i<n;i++)
    {
        sum = nums[i];
    }
    return n*(n+1)/2 - sum;
}


//
//  main.cpp
//  LC283
//
//  Created by H.HUA WU on 1/13/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

void moveZeroes(vector<int>& nums) {
    int n = nums.size();
    for(int i=0;i<n;i++)
    {
        if(nums[i] == 0)
        {
            int p = i+1;
            while(p<n)
            {
                if(nums[p] != 0)
                {
                    nums[i] = nums[p];
                    nums[p] = 0;
                    break;
                }
                p++;
            }
            if(p == n)
            {
                break;
            }
        }
        
    }
}


//
//  main.cpp
//  LC374
//
//  Created by H.HUA WU on 2/8/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int guessNumber(int n) {
    if(n==1)
    {
        return n;
    }
    int begin = 1, end = n;
    int mid = 0;
    while(begin <= end){
        mid = begin + (end-begin)/2;
        int res = guess(mid);
        if(res == 0){
            break;
        }
        else if(res == -1){
            end = mid-1;
        }
        else if(res == 1){
            
            begin = mid+1;
        }
    }
    return mid;
}


//
//  main.cpp
//  LC383
//
//  Created by H.HUA WU on 2/8/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

bool canConstruct(string ransomNote, string magazine) {
    unordered_map<char,int> map(26);
    for(int i=0; i<magazine.length();i++){
        map[magazine[i]]++;
    }
    for(int i=0;i<ransomNote.length();i++){
        if(--map[ransomNote[i]] < 0){
            return false;
        }
    }
    return true;
}


//
//  main.cpp
//  LC387
//
//  Created by H.HUA WU on 2/9/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int firstUniqChar(string s) {
    unordered_map<char, int> map;
    for (int i=0; i<s.length(); i++) {
        map[s[i]]++;
    }
    
    for(int i=0; i<s.length(); i++) {
        if (map[s[i]] == 1) {
            return i;
        }
    }
    return -1;
}


//
//  main.cpp
//  LC389
//
//  Created by H.HUA WU on 2/9/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

char findTheDifference(string s, string t) {
    unordered_map<char, int> map;
    for(int i=0; i<s.length(); i++) {
        map[s[i]]++;
    }
    
    for (int i=0; i<t.length(); i++)
    {
        if(map[t[i]] == 0) { return t[i];}
        map[t[i]]--;
    }
    return 0;
}


//
//  main.cpp
//  LC566
//
//  Created by H.HUA WU on 2/1/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {
    int numsR = int(nums.size());
    int numsC = int(nums[0].size());
    int newSize = r*c;
    if(numsR*numsC != newSize){
        return nums;
    }
    vector<vector <int> > res(r ,vector<int>(c));
    for(int i=0;i<newSize;i++){
        res[i/c][i%c] = nums[i/numsC][i%numsC];
    }
    return res;
}


//
//  main.cpp
//  LC572
//
//  Created by H.HUA WU on 2/1/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int getDepth(TreeNode* tN, int d)
{
    if(tN == NULL){
        return -1;
    }
    
    int depth = max(getDepth(tN->left, d),getDepth(tN->right, d))+1;
    if(depth == d){
        nodes.push_back(tN);
    }
    return depth;
}

bool isSame(TreeNode* n, TreeNode* t)
{
    if(n == NULL && t == NULL){
        return true;
    }
    if(n == NULL || t == NULL){
        return false;
    }
    if(n->val != t->val){
        return false;
    }
    return isSame(n->left, t->left) && isSame(n->right, t->right);
}

bool isSubtree(TreeNode* s, TreeNode* t) {
    //find node with same depth
    if(s == NULL && t == NULL){
        return true;
    }
    if(s == NULL || t == NULL){
        return false;
    }
    getDepth(s, getDepth(t, -1));
    
    //compare
    for(TreeNode* n: nodes){
        if(isSame(n, t)){
            return true;
        }
    }
    return false;
}


//
//  main.cpp
//  LC575
//
//  Created by H.HUA WU on 2/2/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int distributeCandies(vector<int>& candies) {
    sort(candies.begin(), candies.end());
    int size = int(candies.size());
    int count = 0;
    for (int i=0;i<size;i++){
        if(i == 0 || (i>0 && candies[i] != candies[i-1])){
            count++;
        }
    }
    return min(size/2,count);
}


//
//  main.cpp
//  LC581
//
//  Created by H.HUA WU on 2/2/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int findUnsortedSubarray(vector<int>& nums) {
    int begin = -1;
    int end = -1;
    int max = INT_MIN;
    int size = int(nums.size());
    for (int i=0; i<size; i++){
        if(max > nums[i]){
            if(begin == -1){
                begin = i-1;
            }
            while (begin-1>=0 && nums[begin-1]>nums[i]){
                begin--;
            }
            end = i+1;
        }
        else{
            max = nums[i];
        }
    }
    return end - begin;
}


//
//  main.cpp
//  LC594
//
//  Created by H.HUA WU on 2/3/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int findLHS(vector<int>& nums) {
    int nsize = int(nums.size());
    if (nsize <= 1){
        return 0;
    }
    sort(nums.begin(),nums.end());
    int begin = 0;
    int newbegin = 0;
    int len = 0;
    for (int i = 1; i < nsize; i++){
        if(nums[i] - nums[begin] > 1){
            begin = newbegin;
        }
        if(nums[i] != nums[i-1]){
            newbegin = i;
        }
        if(nums[i] -1 == nums[begin]){
            len = max(len,i-begin+1);
        }
    }
    return len;
}


//
//  main.cpp
//  LC598
//
//  Created by H.HUA WU on 2/6/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int maxCount(int m, int n, vector<vector<int>>& ops) {
    for (int i = 0; i < ops.size(); i++) {
        m = min(m,ops[i][0]);
        n = min(n,ops[i][1]);
    }
    return m*n;
}


//
//  main.cpp
//  LC599
//
//  Created by H.HUA WU on 2/6/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {
    unordered_map<string,int> list1map;
    vector<string> res;
    int min = INT_MAX;
    for (int i = 0;i<list1.size();i++) {
        list1map[list1[i]] = i;
    }
    
    for(int i = 0;i<list2.size(); i++) {
        if(list1map.count(list2[i]) != 0) {
            if(i + list1map[list2[i]] < min){
                min = i + list1map[list2[i]];
                cout << i << " min is " << min << endl;
                res.clear();
                res.push_back(list2[i]);
            } else if(i + list1map[list2[i]] == min){
                res.push_back(list2[i]);
            }
        }
    }
    return res;
}


//
//  main.cpp
//  LC606
//
//  Created by H.HUA WU on 2/7/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

string tree2str(TreeNode* t) {
    if (t == NULL) {return "";}
    string strRes = to_string(t->val);
    if (t->left != NULL) {
        strRes += "(" + tree2str(t->left) + ")";
    } else if (t->right != NULL) strRes += "()";
    if (t->right != NULL) {
        strRes += "(" + tree2str(t->right) + ")";
    }
    return strRes;
}


//
//  main.cpp
//  LC617
//
//  Created by H.HUA WU on 2/7/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
    if (t1 && t2) {
        TreeNode* resTree = new TreeNode(t1->val + t2->val);
        resTree->left = mergeTrees(t1->left, t2->left);
        resTree->right = mergeTrees(t1->right, t2->right);
        return resTree;
    } else {
        return t1? t1 : t2;
    }
}


//
//  main.cpp
//  LC695
//
//  Created by H.HUA WU on 1/31/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int dfs(vector<vector<int>>& grid, int i,int j)
{
    if(i>=0 && i<grid.size() && j>=0 && j<grid[0].size() && grid[i][j] == 1)
    {
        grid[i][j] = 0;
        return 1+dfs(grid,i+1,j)+dfs(grid, i-1, j)+dfs(grid, i, j+1)+dfs(grid, i, j-1);
    }
    return 0;
}

int maxAreaOfIsland(vector<vector<int>>& grid) {
    int maxArea = 0;
    for(int i=0;i<grid.size();i++)
    {
        for(int j=0;j<grid[0].size();j++)
        {
            if(grid[i][j] == 1)
            {
                maxArea = max(maxArea,dfs(grid, i, j));
            }
        }
    }
    
    return maxArea;
}


//
//  main.cpp
//  LC696
//
//  Created by H.HUA WU on 1/31/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int countBinarySubstrings(string s) {
    int res = 0;
    int nPre = 0;
    int nCur = 1;
    for(int i = 1;i<s.length();i++)
    {
        if(s[i] == s[i-1])
        {
            nCur++;
        }
        else
        {
            nPre = nCur;
            nCur = 1;
        }
        if(nPre >= nCur)
        {
            res++;
        }
    }
    return res;
}


//
//  main.cpp
//  LC697
//
//  Created by H.HUA WU on 1/29/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int findShortestSubArray(vector<int>& nums) {
    //map
    unordered_map<int,vector<int>> mp;
    int size = int(nums.size());
    for(int i=0;i<size;i++)
    {
        mp[nums[i]].push_back(i);
    }
    //degree
    int degree = 0;
    for(auto it=mp.begin();it!=mp.end();it++)
    {
        degree = max(degree,int(it->second.size()));
    }
    //shortest path
    int res = size;
    for(auto it=mp.begin();it!=mp.end();it++)
    {
        if(int(it->second.size()) == degree)
        {
            res = min(res,it->second.back()-it->second[0] + 1);
        }
    }
    return res;
}


//
//  main.cpp
//  LC717
//
//  Created by H.HUA WU on 1/29/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

bool dfs(vector<int>& bits, int idx)
{
    if(idx == bits.size()) return false;
    if(idx == bits.size()-1 && bits[idx] == 0) return true;
    if(bits[idx] == 1)
    {
        return dfs(bits,idx+2);
    }
    else
    {
        return dfs(bits,idx+1);
    }
}

bool isOneBitCharacter(vector<int>& bits) {
    return dfs(bits,0);
}


//
//  main.cpp
//  LC720
//
//  Created by H.HUA WU on 1/29/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

string longestWord(vector<string>& words) {
    sort(words.begin(),words.end());
    unordered_set<string> strSet;
    string res;
    for(string w : words)
    {
        if(w.size() == 1 || strSet.count(w.substr(0,w.size()-1)))
        {
            res = w.size() > res.size()? w:res;
            strSet.insert(w);
        }
    }
    return res;
}


//
//  main.cpp
//  LC724
//
//  Created by H.HUA WU on 1/28/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int pivotIndex(vector<int>& nums) {
    int size = int(nums.size());
    if(size == 0)
    {
        return -1;
    }
    int left = 0;
    int right = 0;
    for(int i=0;i<size;i++)
    {
        right += nums[i];
    }
    for(int i=0;i<size;left+=nums[i],right-=nums[i],i++)
    {
        if(left == right - nums[i])
        {
            return i;
        }
    }
    return -1;
}


//
//  main.cpp
//  LC728
//
//  Created by H.HUA WU on 1/26/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

vector<int> selfDividingNumbers(int left, int right) {
    vector<int> res;
    for(int i = left; i<=right; i++)
    {
        if(i<10)
        {
            res.push_back(i);
        }
        else
        {
            int temp = i;
            bool bret = true;
            while(temp>0)
            {
                if(temp%10 == 0 || i%(temp%10) != 0)
                {
                    bret = false;
                    break;
                }
                temp = temp/10;
            }
            if(bret == true)
            {
                res.push_back(i);
            }
        }
    }
    return res;
}

//
//  main.cpp
//  LC733
//
//  Created by H.HUA WU on 1/25/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

void dfs(vector<vector<int>>& image,int r,int c,int c0,int c1)
{
    if(r<0 || c<0 || r>=image.size() || c>=image[0].size() || image[r][c] != c0)
    {
        return;
    }
    image[r][c] = c1;
    dfs(image,r,c-1,c0,c1);
    dfs(image, r, c+1, c0, c1);
    dfs(image, r-1, c, c0, c1);
    dfs(image, r+1, c, c0, c1);
}

vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
    int oldcolor = image[sr][sc];
    if(oldcolor !=newColor)
    {
        dfs(image,sr,sc,oldcolor,newColor);
    }
    return image;
}


//
//  main.cpp
//  LC744
//
//  Created by H.HUA WU on 1/25/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

char nextGreatestLetter(vector<char>& letters, char target) {
    if(letters.back()<=target)
    {
        return letters[0];
    }
    int low=0;
    int high=int(letters.size())-1;
    while(low<high)
    {
        int mid = (low+high)/2;
        if(target < letters[mid])
        {
            high = mid;
        }
        else
        {
            low = mid+1;
        }
    }
    return letters[low];
}


//
//  main.cpp
//  LC747
//
//  Created by H.HUA WU on 1/24/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int dominantIndex(vector<int>& nums) {
    int size = int(nums.size());
    if(size == 0)
    {
        return -1;
    }
    
    int largest = -1;
    int seclargest = -1;
    int resIndex = -1;
    for(int i = 0;i<size;i++)
    {
        if(nums[i] > largest)
        {
            seclargest = largest;
            largest = nums[i];
            resIndex = i;
        }
        else if(nums[i] > seclargest)
        {
            seclargest = nums[i];
        }
    }
    
    if(seclargest*2>largest)
    {
        return -1;
    }
    return resIndex;
    
}


//
//  main.cpp
//  LC760
//
//  Created by H.HUA WU on 1/24/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

vector<int> anagramMappings(vector<int>& A, vector<int>& B) {
    if(A.size()!=B.size())
    {
        return vector<int>();
    }
    int size = int(A.size());
    vector<int> res(size);
    
    map<int,int> hashm; // value,index
    for(int i=0;i<size;i++)
    {
        hashm[B[i]] = i;
    }
    
    for(int i=0;i<size;i++)
    {
        auto in = hashm.find(A[i]);
        res[i]= in->second;
    }
    return res;
}


//
//  main.cpp
//  LC762
//
//  Created by H.HUA WU on 1/23/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int isprime(int n)
{
    int c = __builtin_popcount(n);
    return c < 4? c!=1 : (c%2 && c%3);
}

int countPrimeSetBits(int L, int R) {
    int count = 0;
    for(int i=L; i<=R; i++)
    {
        if(isprime(i))
        {
            count++;
        }
    }
    return count;
}


//
//  main.cpp
//  LC766
//
//  Created by H.HUA WU on 1/23/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

bool isToeplitzMatrix(vector<vector<int>>& matrix) {
    int row = int(matrix.size());
    if(row == 0)
    {
        return false;
    }
    int col = int(matrix[0].size());
    for(int i=1;i<row;i++)
    {
        for(int j=1;j<col;j++)
        {
            if(matrix[i][j] != matrix[i-1][j-1])
            {
                return false;
            }
        }
    }
    return true;
}


//
//  main.cpp
//  LC771
//
//  Created by H.HUA WU on 2/9/18.
//  Copyright © 2018 H.HUA WU. All rights reserved.
//

int numJewelsInStones(string J, string S) {
    unordered_map<char, int> map;
    for(int i = 0 ; i<J.length(); i++) {
        map[J[i]]++;
    }
    
    int sum = 0;
    for(int i=0; i<S.length(); i++) {
        if(map[S[i]] > 0) sum++;
    }
    return sum;
}

