C++
//
//  main.cpp
//  LC28
//
//  Created by H.HUA WU on 11/20/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

// Implement strStr()

int strStr(string haystack, string needle) {
    int result = -1;
    // needle size less than or equal to 0, return 0. same for haystack
    if (needle.size()<=0 && haystack.size()<=0){
        return 0;
    }
    // needle size larger than haystack, return -1
    if (needle.size()>haystack.size() ){
        return -1;
    }
    // needle size is less than or equal to 0, return 0
    if (needle.size()<=0){
        return 0;
    }
    
    // find same part between needle and haystack
    for (int i=0;i<haystack.size()-needle.size()+1;i++){
        int j = 0;
        int tempi = i;
        for (j=0;j<needle.size();j++){
            if (needle[j] != haystack[tempi]){
                break;
            }
            else{
                tempi++;
            }
        }
        if (j==needle.size()){
            result = i;
            break;
        }
        
    }
    return result;
}


//
//  main.cpp
//  LC35
//
//  Created by H.HUA WU on 11/23/17.
//  Copyright © 2017 H.HUA WU. All rights reserved.
//

// Search Insert Position

int searchInsert(vector<int>& nums, int target) {
    int result = 0;
    while (result < nums.size()){
	// target equal or less than current nums element, return index
        if(target == nums[result]){
            return result;
        }
        else if(target < nums[result]){
            return result;
        }
        else{
            result++;
        }        
    }
    return result;
}


